{"version":3,"sources":["../../../src/components/ModalView/ModalOpener.js"],"names":["ModalOpener","props","ref","React","useState","visible","setVisible","contentRef","useRef","content","customProps","data","title","width","destroyOnClose","onCancel","onOk","onOpen","contentProps","modalProps","footer","ContentComponent","getFormInst","current","undefined","cancelHandler","e","okHandler","formInst","validateFields","then","values","initData","form","catch","err","console","error","useImperativeHandle","close","children","forwardRef"],"mappings":"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","file":"ModalOpener.js","sourcesContent":["import React, { Fragment } from \"react\";\r\nimport { Button, Modal, Empty, Form, Input } from \"antd\";\r\nimport _pick from \"lodash/pick\";\r\nimport _isFunction from \"lodash/isFunction\";\r\n\r\nimport \"antd/lib/modal/style/css\";\r\n\r\n/**\r\n * 弹窗按钮包装\r\n *```html\r\n        <ModalOpener\r\n          content={ModalPage}\r\n          title=\"ModalPage\"\r\n          custProps={{\r\n            a: 1,\r\n            b: 2,\r\n          }}\r\n        >\r\n          <Button>Open Component</Button>\r\n        </ModalOpener>\r\n *```\r\n * content:   弹窗内的组件,   ReactComponent\r\n * custProps:   传入  content实例的props\r\n * onOk:  提交事件,   如果不关联form 为 (event)=>{},  关联form为  (data,modalCloseFun, {initData,form, e })\r\n * onOpen:  打开弹窗前调用 ()=>{}\r\n * onCancel: 取消事件,   (event)=>{}\r\n * \r\n * 与Form组件联动\r\n * 如下列例子中,  ModalForm 为带Form的组件\r\n *```html\r\n        <ModalOpener\r\n          content={ModalForm}\r\n          title=\"ModalPage\"\r\n          custProps={{\r\n            a: 1,\r\n            b: 2,\r\n          }}\r\n        >\r\n          <Button>Open Component</Button>\r\n        </ModalOpener>\r\n *```\r\n *需要在ModalForm中, 通过ref={props.forwardedRef} 关联Form组件, 组件将自动校验form, 直接传递form值到回调onOk\r\n *如下,  \r\n *```html\r\n      <Form ref={forwardedRef}>\r\n        <FormLayout>\r\n          <FormField\r\n            label={\"Test Label\"}\r\n            name={\"test1\"}\r\n            initialValue={data.test}\r\n            required\r\n          >\r\n            <Input />\r\n          </FormField>\r\n        </FormLayout>\r\n      </Form>\r\n *```\r\n */\r\n\r\nfunction ModalOpener(props, ref) {\r\n  // 展示状态\r\n  const [visible, setVisible] = React.useState(false);\r\n\r\n  // 内部引用\r\n  const contentRef = React.useRef();\r\n\r\n  const {\r\n    // 自动以对象\r\n    content,\r\n    customProps,\r\n    data,\r\n\r\n    // modal相关\r\n    title = \"Modal\",\r\n    width = \"600px\",\r\n    destroyOnClose = true,\r\n\r\n    // 事件\r\n    onCancel,\r\n    onOk,\r\n    onOpen,\r\n  } = props;\r\n\r\n  const contentProps = {\r\n    ...customProps,\r\n    data,\r\n  };\r\n\r\n  const modalProps = _pick(props, [\r\n    \"afterClose\",\r\n    \"bodyStyle\",\r\n    \"closable\",\r\n    \"centered\",\r\n    \"closeIcon\",\r\n    \"confirmLoading\",\r\n    \"keyboard\",\r\n    \"mask\",\r\n    \"maskClosable\",\r\n    \"maskStyle\",\r\n    \"style\",\r\n    \"wrapClassName\",\r\n    \"zIndex\",\r\n    \"cancelText\",\r\n    \"cancelButtonProps\",\r\n    \"okButtonProps\",\r\n    \"okType\",\r\n    \"okText\",\r\n    \"centered\",\r\n  ]);\r\n\r\n  // 没有关联任何函数时, 页脚不显示\r\n  if (!onOk) {\r\n    modalProps.footer = false;\r\n  }\r\n\r\n  // cancelText\t取消按钮文字\tstring | ReactNode\t取消\r\n  // okText\t确认按钮文字\tstring | ReactNode\t确定\r\n\r\n  const ContentComponent = props.content;\r\n  const getFormInst = () => {\r\n    if (contentRef.current) {\r\n      return contentRef.current;\r\n    }\r\n    return undefined;\r\n  };\r\n\r\n  const cancelHandler = async (e) => {\r\n    if (_isFunction(onCancel)) {\r\n      await onCancel(e);\r\n    }\r\n    setVisible(false);\r\n  };\r\n\r\n  const okHandler = async (e) => {\r\n    if (!_isFunction(onOk)) {\r\n      return;\r\n    }\r\n\r\n    const formInst = getFormInst();\r\n\r\n    if (formInst) {\r\n      // 有form对象\r\n      formInst\r\n        .validateFields()\r\n        .then(async (values) => {\r\n          await onOk(values, cancelHandler, {\r\n            initData: data,\r\n            form: formInst,\r\n            e,\r\n          });\r\n        })\r\n        .catch((err) => {\r\n          console.error(err);\r\n        });\r\n    } else {\r\n      // 没有form对象\r\n      await onOk(e, cancelHandler);\r\n      cancelHandler();\r\n    }\r\n  };\r\n\r\n  React.useImperativeHandle(ref, () => {\r\n    const formInst = getFormInst();\r\n    return {\r\n      form: formInst,\r\n      close: cancelHandler,\r\n    };\r\n  });\r\n\r\n  return (\r\n    <Fragment>\r\n      <span\r\n        onClick={async () => {\r\n          if (_isFunction(onOpen)) {\r\n            await onOpen();\r\n          }\r\n          setVisible(true);\r\n        }}\r\n      >\r\n        {props.children}\r\n      </span>\r\n\r\n      <Modal\r\n        className={`antd-x-content-modal`}\r\n        title={title}\r\n        visible={visible}\r\n        width={width}\r\n        destroyOnClose={destroyOnClose}\r\n        onOk={okHandler}\r\n        onCancel={cancelHandler}\r\n        {...modalProps}\r\n      >\r\n        <ContentComponent forwardedRef={contentRef} {...contentProps} />\r\n      </Modal>\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default React.forwardRef(ModalOpener);\r\n"]}