{"version":3,"sources":["../../../src/components/ModalView/ModalOpener.js"],"names":["ModalOpener","props","ref","React","useState","visible","setVisible","contentRef","useRef","content","customProps","data","title","width","destroyOnClose","onCancel","onOk","onOpen","ContentComponent","getFormInst","current","undefined","cancelHandler","e","okHandler","formInst","validateFields","then","values","initData","form","err","console","error","useImperativeHandle","close","modalProps","footer","maskClosable","contentProps","modalRef","children","OpenerComponent","forwardRef","propTypes","PropTypes","elementType","object","string","any","bool","func","defaultProps"],"mappings":"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","sourcesContent":["import React, { Fragment } from \"react\";\r\nimport { Button, Modal, Empty, Form, Input } from \"antd\";\r\nimport _pick from \"lodash/pick\";\r\nimport _isFunction from \"lodash/isFunction\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport \"antd/lib/modal/style/css\";\r\n\r\nfunction ModalOpener(props, ref) {\r\n  // 展示状态\r\n  const [visible, setVisible] = React.useState(false);\r\n\r\n  // 内部引用\r\n  const contentRef = React.useRef();\r\n\r\n  const {\r\n    // 自动以对象\r\n    content,\r\n    customProps,\r\n    data,\r\n\r\n    // modal相关\r\n    title,\r\n    width,\r\n    destroyOnClose,\r\n\r\n    // 事件\r\n    onCancel,\r\n    onOk,\r\n    onOpen,\r\n  } = props;\r\n\r\n  // cancelText\t取消按钮文字\tstring | ReactNode\t取消\r\n  // okText\t确认按钮文字\tstring | ReactNode\t确定\r\n\r\n  const ContentComponent = content;\r\n  const getFormInst = () => {\r\n    if (contentRef.current) {\r\n      return contentRef.current;\r\n    }\r\n    return undefined;\r\n  };\r\n\r\n  const cancelHandler = async (e) => {\r\n    if (_isFunction(onCancel)) {\r\n      await onCancel(e);\r\n    }\r\n    setVisible(false);\r\n  };\r\n\r\n  const okHandler = async (e) => {\r\n    if (!_isFunction(onOk)) {\r\n      return;\r\n    }\r\n\r\n    const formInst = getFormInst();\r\n\r\n    if (formInst) {\r\n      // 有form对象\r\n      formInst\r\n        .validateFields()\r\n        .then(async (values) => {\r\n          await onOk(values, cancelHandler, {\r\n            initData: data,\r\n            form: formInst,\r\n            e,\r\n          });\r\n        })\r\n        .catch((err) => {\r\n          console.error(err);\r\n        });\r\n    } else {\r\n      // 没有form对象\r\n      await onOk(e, cancelHandler);\r\n      cancelHandler();\r\n    }\r\n  };\r\n\r\n  React.useImperativeHandle(ref, () => {\r\n    const formInst = getFormInst();\r\n    return {\r\n      form: formInst,\r\n      close: cancelHandler,\r\n    };\r\n  });\r\n\r\n  const modalProps = _pick(props, [\r\n    \"afterClose\",\r\n    \"bodyStyle\",\r\n    \"closable\",\r\n    \"centered\",\r\n    \"closeIcon\",\r\n    \"confirmLoading\",\r\n    \"keyboard\",\r\n    \"mask\",\r\n    \"maskClosable\",\r\n    \"maskStyle\",\r\n    \"style\",\r\n    \"wrapClassName\",\r\n    \"zIndex\",\r\n    \"cancelText\",\r\n    \"cancelButtonProps\",\r\n    \"okButtonProps\",\r\n    \"okType\",\r\n    \"okText\",\r\n    \"centered\",\r\n  ]);\r\n\r\n  // 没有关联任何函数时, 页脚不显示\r\n  if (!onOk) {\r\n    modalProps.footer = false;\r\n  }\r\n\r\n  // 如果关联form,默认 maskClosable为false\r\n  const formInst = getFormInst();\r\n  if (formInst) {\r\n    modalProps.maskClosable = false;\r\n  }\r\n\r\n  const contentProps = {\r\n    ...customProps,\r\n    modalRef: { close: cancelHandler },\r\n    data,\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <span\r\n        onClick={async () => {\r\n          if (_isFunction(onOpen)) {\r\n            await onOpen();\r\n          }\r\n          setVisible(true);\r\n        }}\r\n      >\r\n        {props.children}\r\n      </span>\r\n\r\n      <Modal\r\n        className={`antd-x-content-modal`}\r\n        title={title}\r\n        visible={visible}\r\n        width={width}\r\n        destroyOnClose={destroyOnClose}\r\n        onOk={okHandler}\r\n        onCancel={cancelHandler}\r\n        {...modalProps}\r\n      >\r\n        <ContentComponent forwardedRef={contentRef} {...contentProps} />\r\n      </Modal>\r\n    </Fragment>\r\n  );\r\n}\r\n\r\n/**\r\n * 弹窗按钮包装\r\n *```html\r\n        <ModalOpener\r\n          content={ModalPage}\r\n          title=\"ModalPage\"\r\n          custProps={{\r\n            a: 1,\r\n            b: 2,\r\n          }}\r\n        >\r\n          <Button>Open Component</Button>\r\n        </ModalOpener>\r\n *```\r\n * content:   弹窗内的组件,   ReactComponent\r\n * custProps:   传入  content实例的props\r\n * onOk:  提交事件,   如果不关联form 为 (event)=>{},  关联form为  (data,modalCloseFun, {initData,form, e })\r\n * onOpen:  打开弹窗前调用 ()=>{}\r\n * onCancel: 取消事件,   (event)=>{}\r\n * \r\n * 与Form组件联动\r\n * 如下列例子中,  ModalForm 为带Form的组件\r\n *```html\r\n        <ModalOpener\r\n          content={ModalForm}\r\n          title=\"ModalPage\"\r\n          custProps={{\r\n            a: 1,\r\n            b: 2,\r\n          }}\r\n        >\r\n          <Button>Open Component</Button>\r\n        </ModalOpener>\r\n *```\r\n *需要在ModalForm中, 通过ref={props.forwardedRef} 关联Form组件, 组件将自动校验form, 直接传递form值到回调onOk\r\n *如下,  \r\n *```html\r\n      <Form ref={forwardedRef}>\r\n        <FormLayout>\r\n          <FormField\r\n            label={\"Test Label\"}\r\n            name={\"test1\"}\r\n            initialValue={data.test}\r\n            required\r\n          >\r\n            <Input />\r\n          </FormField>\r\n        </FormLayout>\r\n      </Form>\r\n *```\r\n */\r\n\r\n/**\r\n * 封装弹窗组件, 将Modal和具体业务Component分离, 简化开发工作\r\n *\r\n * 在props中可以直接使用其他modal的属性\r\n *\r\n * 需要在ModalForm中, 通过ref={props.forwardedRef} 关联Form组件, 组件将自动校验form, 直接传递form值到回调onOk\r\n *\r\n */\r\nconst OpenerComponent = React.forwardRef(ModalOpener);\r\nOpenerComponent.propTypes = {\r\n  /**\r\n   * Modal中要展示的组件类\r\n   */\r\n  content: PropTypes.elementType,\r\n\r\n  /**\r\n   * 传递给content组件的Props\r\n   */\r\n  customProps: PropTypes.object,\r\n\r\n  /**\r\n   * 传递给content组件的Props.data\r\n   */\r\n  data: PropTypes.object,\r\n\r\n  // modal相关\r\n\r\n  /**\r\n   * 弹窗标题,   PS:  其他modal属性,也可以直接使用\r\n   */\r\n  title: PropTypes.string,\r\n\r\n  /**\r\n   * 弹窗宽度\r\n   */\r\n  width: PropTypes.any,\r\n\r\n  /**\r\n   * 关闭时是否销毁组件\r\n   */\r\n  destroyOnClose: PropTypes.bool,\r\n\r\n  /**\r\n   * \t点击蒙层是否允许关闭,  如果关联form默认为false\r\n   */\r\n  maskClosable: PropTypes.bool,\r\n  // 事件\r\n\r\n  /**\r\n   *  取消事件,   (event)=>{}\r\n   */\r\n  onCancel: PropTypes.func,\r\n\r\n  /**\r\n   * 提交事件,   如果不关联form 为 (event)=>{},  关联form为  (data,modalCloseFun, {initData,form, e })\r\n   */\r\n  onOk: PropTypes.func,\r\n\r\n  /**\r\n   * 打开事件, 在打开窗口之前执行   ()=>{}\r\n   */\r\n  onOpen: PropTypes.func,\r\n};\r\n\r\nOpenerComponent.defaultProps = {\r\n  title: \"Modal\",\r\n  width: \"780px\",\r\n  destroyOnClose: true,\r\n};\r\n\r\nexport default OpenerComponent;\r\n"],"file":"ModalOpener.js"}